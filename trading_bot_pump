import requests
import time
import datetime

api_url = "https://poloniex.com/public"
usdt_balance = 1000

def get_ticker():
    params = {"command": "returnTicker"}
    response = requests.get(api_url, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error: {response.status_code}")
        return None

def buy(coin):
    amount = (usdt_balance * 0.1) / ticker[coin]["last"]
    params = {"command": "buy", "currencyPair": coin, "rate": ticker[coin]["last"], "amount": amount, "orderType": "fillOrKill"}
    response = requests.post(api_url, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error: {response.status_code}")
        return None

def sell(coin):
    buy_price = db[coin]["buy_price"]
    coin_amount = db[coin]["coin_amount"]
    sell_price = buy_price * 2
    params = {"command": "sell", "currencyPair": coin, "rate": sell_price, "amount": coin_amount, "orderType": "fillOrKill"}
    response = requests.post(api_url, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error: {response.status_code}")
        return None

def save_price_data(data):
    timestamp = datetime.datetime.now()
    if 'price_data' not in globals():
        globals()['price_data'] = {}
    for coin, price in data.items():
        if coin not in price_data:
            price_data[coin] = []
        price_data[coin].append((timestamp, price))

prev_ticker = None
db = {}
elapsed_time = 0

while True:
    ticker = get_ticker()

    for coin in ticker.keys():
        if prev_ticker is not None:
            curr_price = float(ticker[coin]["last"])
            prev_price = float(prev_ticker[coin]["last"])
            pct_change = ((curr_price - prev_price) / prev_price) * 100
            
            # Check if the price increased by 10% or more in less than 5 minutes
            if pct_change >= 10 and elapsed_time <= 300:
                result = buy(coin)
                if result is not None:
                    print(f"Bought {coin} at {curr_price}")
                    db[coin] = {"buy_price": curr_price, "coin_amount": result["amount"]}

        elif coin in db.keys():
            buy_price = db[coin]["buy_price"]
            pct_change = ((curr_price - buy_price) / buy_price) * 100
            
            # Sell the coin when the price is at least 100% higher than the buy price
            if pct_change >= 100:
                result = sell(coin)
                if result is not None:
                    print(f"Sold {coin} at {curr_price}")
                    del db[coin]

    elapsed_time += 30
    if elapsed_time >= 300:
        save_price_data(ticker)
        elapsed_time = 0

    prev_ticker = ticker
    time.sleep(30)
