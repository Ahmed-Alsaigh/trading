import requests
import time
import hmac
import hashlib

# Define the API URL and the USDT balance
api_url = "https://api.poloniex.com/"
api_key = "YOUR_API_KEY"
secret_key = "YOUR_SECRET_KEY"

# Define a function to generate the API signature
def generate_signature(url_path, payload):
    # Compose the request string
    request_string = url_path + '\n' + payload
    
    # Generate the signature using HMAC-SHA256
    signature = hmac.new(secret_key.encode(), request_string.encode(), hashlib.sha256).hexdigest()
    
    return signature

# Define a function to make an authenticated request
def make_request(method, url_path, params=None):
    # Set the required headers
    headers = {
        'Content-Type': 'application/json',
        'key': api_key,
        'signatureMethod': 'HmacSHA256',
        'signatureVersion': '2',
        'signTimestamp': str(int(time.time() * 1000))
    }
    
    # Generate the API signature
    if params:
        payload = '&'.join([f'{key}={params[key]}' for key in sorted(params.keys())])
        signature = generate_signature(url_path, payload)
        headers['signature'] = signature
    else:
        signature = generate_signature(url_path, '')
        headers['signature'] = signature
    
    # Make the request
    response = requests.request(method, api_url + url_path, headers=headers, params=params)
    
    # Check if the response is successful
    if response.status_code == 200:
        # Return the JSON data as a dictionary
        return response.json()
    else:
        # Print an error message and return None
        print(f"Error: {response.status_code}")
        return None

# Define a function to get the USDT balance
def get_usdt_balance():
    # Make a request to get the account balances
    response = make_request('GET', '/account/balances')
    
    # Check if the response is valid
    if response and 'balances' in response:
        # Find the USDT balance
        for balance in response['balances']:
            if balance['currency'] == 'USDT':
                return float(balance['available'])
    
    # Return None if the balance is not found or there was an error
    return None

# Define a function to get the current ticker data for all markets
def get_ticker():
    # Use the returnTicker method of the API
    response = make_request('GET', '/public/ticker')
    
    # Return the ticker data
    return response

# Define a function to buy a coin at market price
def buy(coin, amount):
    # Use the buy method of the API
    params = {
        'symbol': coin,
        'side': 'buy',
        'type': 'market',
        'quantity': str(amount)
    }
    
    response = make_request('POST', '/orders', params)
    
    # Check if the response is successful
    if response and 'orderId' in response:
        # Return the order ID
        return response['orderId']
    else:
        # Print an error message and return None
        print(f"Error: {response}")
        return None

# Define a function to sell a coin at market price
def sell(coin, amount):
    # Use the sell method of the API
    params = {
        'symbol': coin,
        'side': 'sell',
        'type': 'market',
        'quantity': str(amount)
    }
    
    response = make_request('POST', '/orders', params)
    
    # Check if the response is successful
    if response and 'orderId' in response:
        # Return the order ID
        return response['orderId']
    else:
        # Print an error message and return None
        print(f"Error: {response}")
        return None

# Example usage
usdt_balance = get_usdt_balance()
print(f"USDT balance: {usdt_balance}")

ticker_data = get_ticker()
print(ticker_data)
